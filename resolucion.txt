Class Sugerencia
{
  Prenda parteSuperior;
  Prenda parteInferior;
  Prenda calzado;
  Prenda accesorio;
  List<Prenda> prendasExtras;
  ServicioMeteorologico servicioMeteorologico; 
  
  Sugerencia(Prenda parteSuperior, Prenda parteInferior, Prenda calzado, Prenda accesorio, ServicioMeteorologico  servicioMeteorologico){
   this.parteSuperior = parteSuperior;
   this.parteInferior = parteInferior;
   this.calzado = calzado;
   this.accesorio = accesorio;
   this.servicioMeteorologico = servicioMeteorologico
   }
   
   Atuendo crearAtuendo(){
   Atuendo atuendo = new Atuendo(parteSuperior, parteInferior, calzado, accesorio);
   prendasExtras.forEach({unaPrenda -> atuendo.agregarMasPrendas(unaPrenda)});
   temperaturaBuenosAires = servicioMeteorologico.obtenerCondicionesClimaticas("Buenos Aires);
    
   validarTemperaturaPrenda(temperaturaBuenosAires, parteSuperior);
   validarTemperaturaPrenda(temperaturaBuenosAires, parteInferior);
   validarTemperaturaPrenda(temperaturaBuenosAires, calzado);
   validarTemperaturaPrenda(temperaturaBuenosAires, accesorio);
   
   prendasExtras.forEach({unaPrenda -> validarTemperaturaPrendar(temperatura,unaPrenda)});
   
   return atuendo;
   
   }
   
  //Puede ser que haya logica repetida, pero las validaciones se hacen en distintos momentos de la instanciación y para distintos casos de uso.. 
  
  Bool esAdecuadaPara(temperatura){
    validarTemperaturaPrenda(temperatura, parteSuperior);
    validarTemperaturaPrenda(temperatura, parteInferior);
    validarTemperaturaPrenda(temperatura, calzado);
    validarTemperaturaPrenda(temperatura, accesorio);
    return true;
  }
   
  Void validarTemperaturaPrenda(temperatura, Prenda unaPrenda){
   if(unaPrenda.getTemperaturaMaxima() > temperatura){
     throw new TemperaturaMaximaException("La prenda sobrepasa la temperatura recomendada");
  }
 
}

Class Atuendo
{
  Prenda parteSuperior;
  Prenda parteInferior;
  Prenda calzado;
  Prenda accesorio;
  List<Prenda> prendasExtras;
  
  Atuendo(Prenda parteSuperior, Prenda parteInferior, Prenda calzado, Prenda accesorio){
   validarCategoriaPrenda(parteSuperior,PARTE_SUPERIOR);
   validarCategoriaPrenda(parteInferior,PARTE_INFERIOR);
   validarCategoriaPrenda(calzado,CALZADO);
   validarCategoriaPrenda(accesorio,ACCESORIO);
   this.parteSuperior = parteSuperior;
   this.parteInferior = parteInferior;
   this.calzado = calzado;
   this.accesorio = accesorio;
  }
   
  Void validarCategoriaPrenda(Prenda prenda, Categoria categoria){
   if(prenda.getCategoria != categoria){
     throw new CategoriaErroneaException("La prenda no se corresponde con la categoria a asignar");
     }
  }
    
  Void agregarMasPrendas(Prenda unaPrenda){
   prendasExtras.add(unaPrenda);
  }
}

  
Class Prenda
{ 
  Tipo tipo; 
  Categoria categoria;
  Material material;
  Color colorPrincipal;
  Color colorSecundario;
  Var temperaturaMaxima;
  
   Prenda(Tipo unTipo,Material unMaterial, Color unColorPrincipal,Categoria unaCategoria){ 
    if(unTipo == NULL){
      throw new TipoNuloException("La prenda debe tener un tipo");
      }
    if(unaCategoria == NULL){
       throw new CategoriaNulaException("La prenda debe tener una categoria");
      }
    if(unMaterial == NULL){
        throw new MaterialNuloException("La prenda debe tener un material");
      }
    if(unColor == NULL){
        throw new ColorNuloException("La prenda debe poseer un color principal");
      }

     if(unTipo.getCategoria != unaCategoria){  
     throw new CategoriaException("La categoria no se corresponde con el tipo");
    }
   
    this.tipo = unTipo;
    this.categoria = unaCategoria;
    this.material = unMaterial;
    this.colorPrincipal = unColorPrincipal;
   
    }
   
   Void elegirColorSecundario(Color unColor){
     this.colorSecundario = unColor;
   }
   
   Var getTemparutaMaxima(){
    return this.temperaturaMaxima;
    }
   
}
 
 
Class Tipo
{
   String nombre;
   Categoria categoria;
   
   Tipo(String nombre, Categoria categoria){
    this.nombre = nombre;
    this.categoria = categoria;
    }
    
   Categoria getCategoria(){
     return this.categoria;
    }  
 }
 
 
Enum Categoria
{
   PARTE_SUPERIOR,CALZADO,PARTE_INFERIOR,ACCESORIOS;
}
 
 
Class Color
{
    String codigoRGB;
    
    Color(String codigo){
      this.codigoRGB = codigo;
    }
}
 
 
Class Material
{
    TipoMaterial material;
    Trama trama = LISA;
    
    Material(TipoMaterial material){
     this.material = material;
    }
     
    Material(TipoMaterial material,Trama trama){
     this.material = material;
     this.trama = trama;
    }
}
 
 
Enum TipoMaterial
{
  LANA,ALGODON,SEDA,LINO,POLIESTER,PIEL,PIQUE; 
}
 
 
Enum Trama
{
  LISA,RAYADA,LUNARES,CUADROS,ESTAMPADO;
}
 
 
Class Borrador
{
   Tipo tipo 
   Categoria categoria
   Material material
   Color colorPrincipal
   Color colorSecundario
    
   Borrador(Tipo tipo){
    this.tipo = tipo;
   }
  
   Void setTipo(Tipo tipo){
    this.tipo = tipo;
   }
  
   Void setCategoria(Categoria unaCategoria){
    this.categoria = categoria;
   }
  
   Void setMaterial(Material material){
    this.material = material;
   }
  
   Void setColorPrincipal(Color color){
    this.colorPrincipal = color;
   }
  
   Void setColorSecundario(Color color){
    this.colorSecundario = color;
   }
    
   Prenda instanciarPrenda(){
    Prenda prenda = new Prenda(tipo,material,colorPrincipal,categoria);
    prenda.elegirColorSecundario(colorSecundario);
    return prenda;
   } 
}

--------------------------------------------------------------------------- QMP6 ------------------------------------------------------------------------------------

Interface ObservadorAlerta
{
  void alertasRecibidas(List<String> alertas, List<Usuarios> usuarios);
}

Class SugerenciaDiariaObserver implements ObservadorAlerta
{

 ServicioMeteorologico servicioMeteorologico;
 List<Sugerencia> poolDeSugerencias;
 
 //No estaba seguro como hacer esta lógica, así que asumo que este observer tiene una pool de sugerencias, la cual se filtra por la condicion actual
 // y se envia la primera de la lista apta, se podria añadir una lógica extra aca y un controlador por si no existe alguna sugerencia optima para la
 // temperatura, pero como ya de por si estoy suponiendo una solución lo voy a dejar como una "posible aproximación que falta pulir" -> Preguntar en clase.
 
 void alertasRecibidas(List<String> alertas, List<Usuarios> usuarios){
    if(alertas.size() > 0){
    temperatura = servicioMeteorologico.obtenerCondicionesClimaticas();
    List<Sugerencia> sugerenciasAdecuadas = poolDeSugerencias.filter(sugerencia -> sugerencia.esAdecuadaPara(temperatura));
    QueMePongoService.getInstance().enviarSugerenciaDiaria(sugerenciasAdecuadas.get(0));
    }
 }
 
}

Class NotificadorTormentaObserver implements ObservadorAlerta
{
 
  NotificationService notificador;
  
  // No se de que forma notificar a un usuario específico, así que se lo delego al notify y me lavo las manos // otra opción es asumir que siempre les notifica a todos
  // Y no hacer nada con la lista de usuarios.
 
  void alertasRecibidas(List<String> alertas, List<Usuarios> usuarios){
    if(alertas.contains("STORM"){
      usuarios.forEach(usuario -> notificador.notify(usuario,"Hay alerta de tormenta, recuerda llevarte un paraguas");
       }
    }
}

Class NotificadorGranizoObserver implements ObservadorAlerta
{
 
  NotificationService notificador;
  
  // No se de que forma notificar a un usuario específico, así que se lo delego al notify y me lavo las manos // otra opción es asumir que siempre les notifica a todos
  // Y no hacer nada con la lista de usuarios.
 
  void alertasRecibidas(List<String> alertas, List<Usuarios> usuarios){
    if(alertas.contains("HAIL"){
      usuarios.forEach(usuario -> notificador.notify(usuario,"Hay alerta de granizo, recuerda evita salir en auto");
       }
    }
}

Class MailObserver implements ObservadorAlerta
{
    MailSender enviadorDeMails;
    
   void alertasRecibidas(List<String> alertas, List<Usuarios> usuarios){
    if(alertas.size() > 0){
      String mensaje = "Se recibieron las siguientes alertas meteorologicas: " ++ String.join(",",alertas);
      usuarios.forEach(usuario -> enviadorDeMails.send(usuario.getEmail(),mensaje));
       }
    }
}

//SINGLETON
Class QueMePongoService
{
   List<Usuario> usuarios;
   List<String> alertasMeteorologicasActuales;
   ServicioMeteorologico servicioMeteorologico;
   List<ObservadorAlerta> observadores; 
   
   private static final QueMePongoService INSTANCE = new QueMePongoService();
   
   public static QueMePongoService getInstance() { return INSTANCE; }
    
    // Se le envia la misma sugerencia a todos los usuarios, el enunciado no define sobre una "sugerencia personalizada"
    
    Void enviarSugerenciaDiaria(Sugerencia unaSugerencia){
      usuarios.forEach(usuario -> usuario.actualizarSugerenciaDiaria(unaSugerencia);
    }
    
    Void actualizarAlertasMeteorologicas(){
      alertasMeteorologicasActuales = servicioMeteorologico.obtenerAlertasMeteorologicas();
      observadores.forEach[observador -> observador.alertasRecibidas(alertasMeteorologicasActuales,usuarios);
    }
    
    Void agregarObservador(ObservadorAlerta unObservador){
      observadores.add(unObservador);
    }
    
    Void eliminarObservador(ObservadorAlerta unObservador){
      observadores.remove(unObservador);
    }
    
    List<String> getAlertasMeteorologicasActuales{
      return alertasMeteorologicasActuales;
    }
    
}
 
Class Usuario
{
    List<Uniforme> uniformesRecomendados;
    List<Atuendo> atuendosRecomendados;
    List<Guardaropa> misGuardarropas;
    String email;
    
    Sugerencia sugerenciaDiaria;
    
    Void actualizarSugerenciaDiaria(Sugerencia unaSugerencia){
      sugerenciaDiaria = unaSugerencia;
    }
    
    List<String> conocerAlertasMeterologicas(){
      return QueMePongoService.getInstance().getAlertasMeteorologicasActuales();
    }
    
    void compartirGuardarropa(Guardarropa unGuardarropa){
      misGuardarropas.add(unGuardarropa);
    }
    
    //Código duplicado pero que atacan distintos problemas, en lo que es modelar requerimientos lo veo bien separarlo.
    
    Void agregarGuardarropa(Guardarropa unGuardarropa){
      this.misGuardaropas.add(guardaRopa);
    }
    
    Void recibirPropuestaModificacion(Modificacion unaModificacion){
      unaModificacion.getguardarropa.agregarModificacion(unaModificacion);
    }
    
    Void aceptarModificacion(Modificacion unaModificacion){
     unaModificacion.aplicarModificacion();
    }
    
    Void rechazarModificacion(Modificacion unaModificacion){
       unaModificacion.getguardaRopa.quitarModificacion(unaModificacion);
     }
    }
    
    Void deshacerUnaModificacion(Modificacion unaModificacion){
    unaModificacion.deshacerModificacion();
    }

    Void recibirRecomendacionDeUniforme(Uniforme unUniforme){
      uniformesRecomendados.add(unUniforme);
      }
      
    Void recibirRecomendacionDeAtuendo(Atuendo atuendo){
      atuendosRecomendados.add(atuendo);
      }
     
    String getEmail(){
      return email;
    }
    
 }
 
Interface ServicioMeteorologico
{
   EstadoDelTiempo obtenerCondicionesClimaticas(String direccion);
   List<String> obtenerAlertasMeteorologicas();
}
  
  
Class ServicioMeteorologicoAccuWeather implements ServicioMeteorologico
{

private Map<String, RespuestaMeteorologica> ultimasRespuestas;
AccWeatherAPI api;
Duration periodoDeValidez;

public ServicioMeteorologico(AccuWeatherAPI api, Duration periodoDeValidez) { 
   this.api = api;            
   this.periodoDeValidez = periodoDeValidez;  
   this.ultimasRespuestas = new HashMap<String, Object>();
 }
  
 public EstadoDelTiempo obtenerCondicionesClimaticas(String direccion) {
   if (!this.ultimasRespuestas.contains(direccion) || this.ultimasRespuestas.get(direccion).expiro()) {
    ultimasRespuestas.put(new RespuestaMeteorologica(consultarApi(direccion), proximaExpiracion()));    
   }
   return this.ultimasRespuestas.get(direccion).getEstadoDelTiempo();
   }
   
 private List<String> obtenerAlertasMetereologicas{
   Map<String, Object> alertas = apiClima.getAlertas(“Buenos Aires”); 
   return alertas.get("CurrentAlerts")
   }
}  
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Class Guardarropa
{
    List<Prenda> misPrendas;
    List<Modificacion> modificaciones;
    
    Guardarropa(Arraylist<Prenda> prendas){
    this.misPrendas = prendas;
    }
    
    void agregarUnaPrenda(Prenda prenda){
    misPrendas.add(prenda);
    }
    
    void quitarUnaPrenda(Prenda prenda){
    misPrendas.remove(prenda);
    }
    
    void agregarModificacion(Modificacion unaModificacion){
    modificaciones.add(unaModificacion);
    }
    
    void quitarModificacion(Modifcacion unaModificacion){
    modificaciones.remove(unaModificacion);
    }
   
}
 
Abstract Class Modificacion
{
  Prenda prenda;
  Guardaropa miGuardarropa;
  Estado estado;
 
  abstract method aplicarModificacion(){
    if(estado == APLICADA){
     throw new ModificacionException("La modficacion ya habia sido aplicada");
    }
    estado = APLICADA;
    this.aplicarOperacion();
  }
  
  abstract method deshacerModificacion(){
    if(estado == DESHECHA){
    throw new ModificacionException("No se puede deshacer una modificacion que no esta vigente");
    }
    estado = DESHECHA;
    this.deshacerOperacion();
  }
  
  abstract void aplicarOperacion();
  
  abstract void deshacerOperacion();
  
}
 
Class AgregarPrenda Extends Modificacion
{
   
   void aplicarOperacion(){
   miGuardaropa.agregarPrenda(prenda);
   }
   
   void deshacerOperacion(){
   miGuardarropa.quitarPrenda(prenda);
   }
    
}
 
Class QuitarPrenda Extends Modificacion
{
 
  void aplicarOperacion(){
   miGuardarropa.quitarPrenda(prenda);
   }
   
   void deshacerOperacion(){
   miGuardarropa.agregarPrenda(prenda);
   }
    
    
}

Enum Estado
{
 APLICADA,DESHECHA;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

CLass Uniforme
{
    Prenda prendaSuperior;
    Prenda prendaInferior;
    Prenda calzado
  
    Uniforme(Prenda prendaSuperior, Prenda prendaInferior, Prenda calzado){
      this.prendaSuperior = prendaSuperior;
      this.prendaInferior = prendaInferior;
      this.calzado = calzado;
    }
 }
  
  
 Class creadorDeUniformes
 {
   Uniforme armarUniforme(){
     return new Uniforme(this.crearParteSuperior(), this.crearParteInferior(), this.crearCalzado());
   }

   abstract Prenda crearParteSuperior();
   abstract Prenda crearParteInferior();
   abstract Prenda crearCalzado();
 }


//Estos uniformes no pasan por el control de Prenda, deben especificar todos los apartados del constructor...
 
Class UniformeSanJuan inherits creadorDeUniformes
{
 
  Super Prenda crearParteSuperior(){
    borrador = new Borrador(new Tipo("CHOMBA",PARTE_SUPERIOR));
    borrador.setColorPrincipal(new Color("008F39"));
    borrador.setMaterial(new Material("PIQUE"));
    borrador.setCategoria(PARTE_SUPERIOR);
    return borrador.instanciarPrenda();
  }

  Super Prenda crearParteInferior(){
    borrador = new Borrador(new Tipo("PANTALON",PARTE_INFERIOR));
    borrador.setColorPrincipal(new Color("9B9B9B"));
    borrador.setMaterial(new Material(ACETATO));
    borrador.setCategoria(PARTE_INFERIOR);
    return borrador.instanciarPrenda();
  }

  Super Prenda crearCalzado(){  
    borrador = new Borrador(new Tipo("ZAPATILLAS",CALZADO));
    borrador.setColorPrincipal(new Color("FFFFFF"));
    borrador.setCategoria(CALZADO);
    return borrador.instanciarPrenda();
  }
}
  
Class UniformeJohnson inherits creadorDeUniformes
{
 
  super Prenda crearParteSuperior(){
    borrador = new Borrador(new Tipo("CAMISA",PARTE_SUPERIOR));
    borrador.setColorPrincipal(new Color("FFFFFF));
    borrador.setCategoria(PARTE_SUPERIOR);
    return borrador.instanciarPrenda();
  }

  super Prenda crearParteInferior(){
    borrador = new Borrador(new Tipo("Pantalon de vestir",PARTE_INFERIOR));
    borrador.setColorPrincipal(new Color("0A0A0A"));
    borrador.setCategoria(PARTE_INFERIOR);
    return borrador.instanciarPrenda();
  }

  super Prenda crearCalzado(){
    borrador = new Borrador(new Tipo("ZAPATOS",CALZADO));
    borrador.setColorPrincipal(new Color("0A0A0A"));
    borrador.setCategoria(CALZADO);
    return borrador.instanciarPrenda();
  }
  
}

Decisiones: 
- Se descarta la creación de una clase empleado y se opta por un singleton RepositorioUsuario al cual mediante UI se le activa el metodo que actualice las sugerencias diarias y que envie las señales de alerta meteorologica --> El singleton pasa a ser mas que un repositorio, Class QueMePongoService

- La mayoria de requerimientos se resolvieron implementando el patron OBSERVER, el evento se lanza cuando un empleado actualiza las alertasMeteorologicas en el Singleton QueMePongoService

- Se optó por que sean los propios observadores que desglocen la lista de alertas ( List<String ) y pregunten si existe la alerta que ellos esperan

- Se optó por tambien pasarle a los observadores la lista de usuarios (todos los dados de alta en el sistema) para que puedieran realizar las notificaciones o lógicas necesarias
