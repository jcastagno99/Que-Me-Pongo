Class Sugerencia
{
  Prenda parteSuperior;
  Prenda parteInferior;
  Prenda calzado;
  Prenda accesorio;
  ArrayList<Prenda> prendasExtras;
  
  Sugerencia(Prenda parteSuperior, Prenda parteInferior, Prenda calzado, Prenda accesorio){
   this.parteSuperior = parteSuperior;
   this.parteInferior = parteInferior;
   this.calzado = calzado;
   this.accesorio = accesorio;
   }
   
   Atuendo crearAtuendo(){
   Atuendo atuendo = new Atuendo(parteSuperior, parteInferior, calzado, accesorio);
   prendasExtras.forEach({unaPrenda -> atuendo.agregarMasPrendas(unaPrenda)});
   temperaturaBuenosAires = condicionesClimaticasBuenosAires.conocerTemperaturaActual(); // LA API SE LLAMA UNA VEZ X RECOMENDACIÓN (LO MÍNIMO NECESARIO)
   
   //De querer reducir aun mas el uso de la API, se podría guardar la temperatura y actualizarla solo cada cierto tiempo, aunque esto pierde precisión en la recomendación.
   
   validarTemperaturaPrenda(temperaturaBuenosAires, parteSuperior);
   validarTemperaturaPrenda(temperaturaBuenosAires, parteInferior);
   validarTemperaturaPrenda(temperaturaBuenosAires, calzado);
   validarTemperaturaPrenda(temperaturaBuenosAires, accesorio);
   
   prendasExtras.forEach({unaPrenda -> validarTemperaturaPrendar(temperatura,unaPrenda)});
   
   return atuendo;
   
   }
   
  Void validarTemperaturaPrenda(temperatura, Prenda unaPrenda){
   if(unaPrenda.getTemperaturaMaxima() > temperatura){
     throw new TemperaturaMaximaException("La prenda sobrepasa la temperatura recomendada");
  }
}

Class Atuendo
{
  Prenda parteSuperior;
  Prenda parteInferior;
  Prenda calzado;
  Prenda accesorio;
  ArrayList<Prenda> prendasExtras;
  
  Atuendo(Prenda parteSuperior, Prenda parteInferior, Prenda calzado, Prenda accesorio){
   validarCategoriaPrenda(parteSuperior,PARTE_SUPERIOR);
   validarCategoriaPrenda(parteInferior,PARTE_INFERIOR);
   validarCategoriaPrenda(calzado,CALZADO);
   validarCategoriaPrenda(accesorio,ACCESORIO);
   this.parteSuperior = parteSuperior;
   this.parteInferior = parteInferior;
   this.calzado = calzado;
   this.accesorio = accesorio;
  }
   
  Void validarCategoriaPrenda(Prenda prenda, Categoria categoria){
   if(prenda.getCategoria != categoria){
     throw new CategoriaErroneaException("La prenda no se corresponde con la categoria a asignar");
     }
  }
    
  Void agregarMasPrendas(Prenda unaPrenda){
   prendasExtras.add(unaPrenda);
  }
}

  
Class Prenda
{ 
  Tipo tipo; 
  Categoria categoria;
  Material material;
  Color colorPrincipal;
  Color colorSecundario;
  Var temperaturaMaxima;
  
   Prenda(Tipo unTipo,Material unMaterial, Color unColorPrincipal,Categoria unaCategoria){ 
    if(unTipo == NULL){
      throw new TipoNuloException("La prenda debe tener un tipo");
      }
    if(unaCategoria == NULL){
       throw new CategoriaNulaException("La prenda debe tener una categoria");
      }
    if(unMaterial == NULL){
        throw new MaterialNuloException("La prenda debe tener un material");
      }
    if(unColor == NULL){
        throw new ColorNuloException("La prenda debe poseer un color principal");
      }

     if(unTipo.getCategoria != unaCategoria){  
     throw new CategoriaException("La categoria no se corresponde con el tipo");
    }
   
    this.tipo = unTipo;
    this.categoria = unaCategoria;
    this.material = unMaterial;
    this.colorPrincipal = unColorPrincipal;
   
    }
   
   Void elegirColorSecundario(Color unColor){
     this.colorSecundario = unColor;
   }
   
   Var getTemparutaMaxima(){
    return this.temperaturaMaxima;
    }
   
}
 
 
Class Tipo
{
   String nombre;
   Categoria categoria;
   
   Tipo(String nombre, Categoria categoria){
    this.nombre = nombre;
    this.categoria = categoria;
    }
    
   Categoria getCategoria(){
     return this.categoria;
    }  
 }
 
 
Enum Categoria
{
   PARTE_SUPERIOR,CALZADO,PARTE_INFERIOR,ACCESORIOS;
}
 
 
Class Color
{
    String codigoRGB;
    
    Color(String codigo){
      this.codigoRGB = codigo;
    }
}
 
 
Class Material
{
    TipoMaterial material;
    Trama trama = LISA;
    
    Material(TipoMaterial material){
     this.material = material;
    }
     
    Material(TipoMaterial material,Trama trama){
     this.material = material;
     this.trama = trama;
    }
}
 
 
Enum TipoMaterial
{
  LANA,ALGODON,SEDA,LINO,POLIESTER,PIEL,PIQUE; 
}
 
 
Enum Trama
{
  LISA,RAYADA,LUNARES,CUADROS,ESTAMPADO;
}
 
 
Class Borrador
{
   Tipo tipo 
   Categoria categoria
   Material material
   Color colorPrincipal
   Color colorSecundario
    
   Borrador(Tipo tipo){
    this.tipo = tipo;
   }
  
   Void setTipo(Tipo tipo){
    this.tipo = tipo;
   }
  
   Void setCategoria(Categoria unaCategoria){
    this.categoria = categoria;
   }
  
   Void setMaterial(Material material){
    this.material = material;
   }
  
   Void setColorPrincipal(Color color){
    this.colorPrincipal = color;
   }
  
   Void setColorSecundario(Color color){
    this.colorSecundario = color;
   }
    
   Prenda instanciarPrenda(){
    Prenda prenda = new Prenda(tipo,material,colorPrincipal,categoria);
    prenda.elegirColorSecundario(colorSecundario);
    return prenda;
   }
  
}
 
 
Class Usuario
{
    ArrayList<Uniforme> uniformesRecomendados;
    ArrayList<Atuendo> atuendosRecomendados;
  
    void recibirRecomendacionDeUniforme(Uniforme unUniforme){
      uniformesRecomendados.add(unUniforme);
      }
      
    void recibirRecomendacionDeAtuendo(Atuendo atuendo){
      atuendosRecomendados.add(atuendo);
      }
 }
  
  
Class CondicionesClimaticasBuenosAires implements AccuWeatherAPI
{
   AccuWeatherAPI apiClima = new AccuWeatherAPI();
    
   //De desear cambiar la API de clima se podría cambiar este atributo con un setter, aunque los metodos probablemente deberían ser actualizados, no encontré una mejor
   abstracción pues desconozco que otras APIS podrían elegirse.
    
   List<Map<String,Object>>  condicionesClimaticas = apiClima.getWeather("Buenos Aires, Argentina");
    
   method conocerCiertaCondicionClimatica(condicion){
    this.condicionesClimaticas.get(0).get(condicion);
    }

   method conocerTemperaturaActual(){
    this.condicionesClimaticas.get(0).get("Temperatura");
    }
    
}
 
 
CLass Uniforme
{
    Prenda prendaSuperior;
    Prenda prendaInferior;
    Prenda calzado
  
    Uniforme(Prenda prendaSuperior, Prenda prendaInferior, Prenda calzado){
      this.prendaSuperior = prendaSuperior;
      this.prendaInferior = prendaInferior;
      this.calzado = calzado;
    }
 }
  
  
 Class creadorDeUniformes
 {
   Uniforme armarUniforme(){
     return new Uniforme(this.crearParteSuperior(), this.crearParteInferior(), this.crearCalzado());
   }

   abstract Prenda crearParteSuperior();
   abstract Prenda crearParteInferior();
   abstract Prenda crearCalzado();
 }


//Estos uniformes no pasan por el control de Prenda, deben especificar todos los apartados del constructor...
 
Class UniformeSanJuan inherits creadorDeUniformes
{
 
  Super Prenda crearParteSuperior(){
    borrador = new Borrador(new Tipo("CHOMBA",PARTE_SUPERIOR));
    borrador.setColorPrincipal(new Color("008F39"));
    borrador.setMaterial(new Material("PIQUE"));
    borrador.setCategoria(PARTE_SUPERIOR);
    return borrador.instanciarPrenda();
  }

  Super Prenda crearParteInferior(){
    borrador = new Borrador(new Tipo("PANTALON",PARTE_INFERIOR));
    borrador.setColorPrincipal(new Color("9B9B9B"));
    borrador.setMaterial(new Material(ACETATO));
    borrador.setCategoria(PARTE_INFERIOR);
    return borrador.instanciarPrenda();
  }

  Super Prenda crearCalzado(){  
    borrador = new Borrador(new Tipo("ZAPATILLAS",CALZADO));
    borrador.setColorPrincipal(new Color("FFFFFF"));
    borrador.setCategoria(CALZADO);
    return borrador.instanciarPrenda();
  }
}
  
Class UniformeJohnson inherits creadorDeUniformes
{
 
  super Prenda crearParteSuperior(){
    borrador = new Borrador(new Tipo("CAMISA",PARTE_SUPERIOR));
    borrador.setColorPrincipal(new Color("FFFFFF));
    borrador.setCategoria(PARTE_SUPERIOR);
    return borrador.instanciarPrenda();
  }

  super Prenda crearParteInferior(){
    borrador = new Borrador(new Tipo("Pantalon de vestir",PARTE_INFERIOR));
    borrador.setColorPrincipal(new Color("0A0A0A"));
    borrador.setCategoria(PARTE_INFERIOR);
    return borrador.instanciarPrenda();
  }

  super Prenda crearCalzado(){
    borrador = new Borrador(new Tipo("ZAPATOS",CALZADO));
    borrador.setColorPrincipal(new Color("0A0A0A"));
    borrador.setCategoria(CALZADO);
    return borrador.instanciarPrenda();
  }
  
}

 Decisiones: 
 
- Los controles de que las categorias sean adecuadas se hacen en el constructor del Atuendo, como no se pide crear Atuendos (para recomendaciones) a medias, se obliga a que
se cumpla como mínimo con el requisito de 1 prenda por categoría, además del apartado de prendas extras (para el cual no hay control). Esto permite además de cumplir el requisito, que no haya atuendos inconsistentes.

- El control de temperatura se delega en la Clase Sugerencia, la cual instancia un Atuendo pero validando las temperaturas correctas.

- Cada prenda conoce hasta que temperatura es recomendable de usar.

- Los Usuarios tienen una lista de Atuendos como recomendaciones y pueden recibir las mismas mediante un método.

- La API de clima (solo codeada para BUENOS AIRES por el dominio de la entrega) es un objeto global (NO SE ESPECIFÍCA EN EL CÓDIGO).
   
