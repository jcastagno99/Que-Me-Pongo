class Atuendo{

  ArrayList<Prenda> prendas;
  
  }
  

class Prenda{
  
  Tipo tipo // Conoce a que categoria pertenece
  Categoria categoria
  Material material
  Color colorPrincipal
  Color colorSecundario
  
   Prenda(Tipo unTipo, Categoria unaCategoria, Material unMaterial, Color unColorPrincipal){ // Tipo viene con la categoria ya cargada
   
   // Chequeamos nulos
   if(unTipo == NULL){
    throw new TipoNuloException("La prenda debe tener un tipo");
    }
   if(unaCategoria == NULL){
      throw new CategoriaNulaException("La prenda debe tener una categoria");
    }
   if(unMaterial == NULL){
      throw new MaterialNuloException("La prenda debe tener un material");
    }
   if(unColor == NULL){
      throw new ColorNuloException("La prenda debe poseer un color principal");
    }
   //Esto huele a programación defensiva y muchos "ifs" pero son requerimientos específicos del enunciado y ya que asumo implementación en java (tipado explicito)
   //no pude crear un metodo que englobe todos los objetos, crear un objeto validadorDeNoNulos e invocarlo varias veces, además de que dentro de dicho objeto debe
   //haber un método por cada parametro a validar (por el tipado) sería hacer codigo feo pero en otro lugar.
   //todo esto cambia si los ENUMs no permiten NULOS o se pueden controlar en cada ENUM (cosa que desconozco)
   
   // Validamos que la categoria del tipo se corresponda con la categoria que se le quiere asignar a la prenda
   if(unTipo.getCategoria != unaCategoria){  
    throw new CategoriaException("La categoria no se corresponde con el tipo");
   }
   
   this.tipo = unTipo;
   this.categoria = unaCategoria;
   this.material = unMaterial;
   this.colorPrincipal = unColorPrincipal;
   
   }
   
   void elegirColorSecundario(Color unColor){  // Lo seteo a parte de los demas porque es opcional
   this.colorSecundario = unColor;
   }
   
 }
 
 class Tipo{
 
    String nombre;        // Algo dificil de controlar con un enum porque podria haber infinitos tipos EJ: "camisaSinMangas", "remeraVerdeFluor", "pantalonesDeShrek", etc.
    Categoria categoria;
    
    Categoria getCategoria(){
      return this.categoria;
      }
 }
 
 enum Categoria
 {
    PARTE_SUPERIOR,CALZADO,PARTE_INFERIOR,ACCESORIOS;
 }
 
 enum Color
 {
    ROJO,VERDE,AMARILLO,AZUL,NEGRO,GRIS,BLANCO,VIOLETA; // Todos los colores que se quiera
 }
 
 enum Material
 {
    LANA,ALGODON,SEDA,LINO,POLIESTER,PIEL; // etc
 }
 
 
 Decisiones: 
   
//Uso enums en lugar de strings para poder controlar entradas validad aunque esto implica que por cada
//entrada valida nueva debo agregarla en el enum correspondiente.
//Los controles se hacen en el constructor (Fail Fast).
  
 //Existe una relación categoría-tipo que se puede implementar de muchas formas -> Opto porque el tipo de la
 //prenda conozca a que categoria pertenece.
 
 //Esta relación se podría haber hecho desde otro punto y es que "Categoría" conozca a que tipos de prenda es asociado
 //descarté esto porque lo que se define en el enunciado como "tipo" puede ser cualquier cosa EJ: "remeraMangasLargasConEstampadoDelRayoMcqueen"
 //en cambio en lo que es categorias tenemos menos variedades.

